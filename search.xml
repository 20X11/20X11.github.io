<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10.8前</title>
    <url>/2024/10/07/10-8%E5%89%8D/</url>
    <content><![CDATA[<p>刚开始对于整个项目还没有一个整体的概念，选择先从数据集入手</p>
<h3 id="第二讲">第二讲</h3>
<p>通过挂载共享文件夹，将两个zip文件传输至ubuntu中，再通过unzip指令解压</p>
<p>结果也是不出意外的把虚拟机空间挤爆了（，直接爆了一个write error</p>
<p>关于虚拟机扩容，可以看这个帖子，讲述的很详细： <a class="link" 
 href="https://blog.csdn.net/Alan_Walker688/article/details/131889313#:~:text=扩容后新增加的硬盘没有被%20Linux%20识别出来，所以一直卡在启动页面，不能正常启动。%203%20解决方法%20进入,Ubuntu%20的%20live%20系统，然后使用磁盘分区工具%20GParted%20给已有分区扩容，最后重启即可。" >在VMWare中给Ubuntu
虚拟机硬盘扩容后无法正常开机的相关问题_虚拟机扩容后无法启动-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>
<p>经过tree检验后和文章中目录结构相同，然后根据文章继续进行：</p>
<p>先安装python-pip3，再用pip install 安装kitti2bag和更新numpy，
可能会网络报错，可将pip3换源</p>
<p>安装后运行转包一直报错，经过查询，发现rosmelodic使用的是python2，将其中一些库适配到python3的方法较为繁琐，我实操一遍以后发现还是会有bug，于是重新安装了python2来运行。</p>
<p>执行完kitti2bag后，生成了kitti_2011_10_03_drive_0027_synced.bag</p>
<p>从github上下载kitti_test/display_bag.rviz，传入ubuntu中</p>
<p>运行rviz和.bag文件，发现与文章中大体符合，但是存在一个bug：主视图是灰度图像。增加点云节点修改颜色渐变好像也不起作用，因为颜色不是很重要，先跳过。</p>
<p>在看第三讲的时候，因为ros忘得差不多了，再复习一下ros。</p>
<h3 id="cmakelist.txt">CMakeList.txt</h3>
<p>以一个刚生成的功能包为例，查看其中的cmakelist.txt</p>
<ul>
<li><p>required cmake version :
<code>cmake_minimum_required(VERSION 3.0.2)</code>
cmake版本需求</p></li>
<li><p>Package Name ： <code>project(test_pkg)</code>
包名为test_pkg</p></li>
<li><p>包依赖：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">	roscpp</span><br><span class="line">	rospy</span><br><span class="line">	std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这三个依赖是创立功能包时写的依赖包，当一个包被find_package后，会导致产生相应的CMake变量</p></li>
<li><p>Declare a c++ library ：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">add_library</span>($&#123;PROJECT_NAME&#125;</span><br><span class="line">	src/$&#123;PROJECT_NAME&#125;/test_pkg.cpp           </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>Declare ROS messages, services and actions: 将.msg, .srv,
.action后缀文件转化成.cpp, .h的声明</p></li>
<li><p>catkin_package() : cmake宏</p></li>
</ul>
<h3 id="第三四讲">第三，四讲</h3>
<p>根据文章所给出的代码，对着敲了一遍，复现了一些结果。暂时还没有理解完全，下周补一个解释贴</p>
]]></content>
  </entry>
  <entry>
    <title>10。20前</title>
    <url>/2024/10/19/10%E3%80%8220%E5%89%8D/</url>
    <content><![CDATA[<p>Eigen：只有头文件，没有其他库，不需要链接</p>
<p>locate ... | grep ... 找寻文件位置</p>
<p>ctrl + ~ 调出终端</p>
<p>进入程序文件，mkdir build , cd build, cmake, make , ./xxx</p>
<p>CMAKE_CXX_FLAGS
参数群，CMake预定义的全局内建变量，可用于设置编译选项。可以直接使用set修改</p>
<p>eg. <code>set(CMAKE_CXX_FLAGS "-O3")</code> 开o3优化</p>
<p><code>include_directories("usr/include/elgen3")</code> 添加头文件</p>
<p><code>add_executable(elgenMatrix elgenMatrix.cpp)</code></p>
<h3 id="glog安装">glog安装</h3>
<p><code>git clone https://github.com/google/glog</code></p>
<p><code>sudo apt-get install autoconf automake libtool</code></p>
<p>我在这里报了个错，但是感觉是自己的apt的问题，正常安装glog和automake应该不会出现：
<code>E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend)</code>
根据报错信息提示可以大概看出是进程死锁的问题，通过查询解决：</p>
<p><a class="link" 
 href="https://blog.csdn.net/lun55423/article/details/108907779" >【已解决】Could
not get lock /var/lib/dpkg/lock-frontend-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>
<p>在glog中预编译时，提示我cmake版本过低，根据查询，直接删除当前版本的cmake再安装新版会导致很多编译和安装的ros库寄掉</p>
<p>根据这篇文章进行cmake的更新：</p>
<p><a class="link" 
 href="https://www.cnblogs.com/Maker-Liu/p/16550381.html" >正确的方式升级ubuntu的cmake
- Oontinue - 博客园<i class="fas fa-external-link-alt"></i></a></p>
<p>会使用高版本的cmake重新预编译之前的所有库，时间可能会长一点</p>
<p>然后回到glog库重新预编译和编译即可</p>
<p><code>sudo make install</code></p>
<p>将程序安装至系统中。如果原始码编译无误，且执行结果正确，便可以把程序安装至系统预设的可执行文件存放路径。默认/usr/local/bin</p>
<p><code>sudo ldconfig</code></p>
<p>动态链接库管理命令</p>
<h3 id="publisher">publisher</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lidar_localization/publisher/cloud_publisher.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> lidar_localization &#123;</span><br><span class="line">CloudPublisher::<span class="built_in">CloudPublisher</span>(ros::NodeHandle&amp; nh,</span><br><span class="line">                               std::string topic_name,</span><br><span class="line">                               <span class="type">size_t</span> buff_size,</span><br><span class="line">                               std::string frame_id)</span><br><span class="line">    :<span class="built_in">nh_</span>(nh), <span class="built_in">frame_id_</span>(frame_id) &#123;</span><br><span class="line">    publisher_ = nh_.<span class="built_in">advertise</span>&lt;sensor_msgs::PointCloud2&gt;(topic_name, buff_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CloudPublisher::Publish</span><span class="params">(CloudData::CLOUD_PTR  cloud_ptr_input)</span> </span>&#123;</span><br><span class="line">    <span class="function">sensor_msgs::PointCloud2Ptr <span class="title">cloud_ptr_output</span><span class="params">(<span class="keyword">new</span> sensor_msgs::PointCloud2())</span></span>;</span><br><span class="line">    pcl::<span class="built_in">toROSMsg</span>(*cloud_ptr_input, *cloud_ptr_output);</span><br><span class="line">    cloud_ptr_output-&gt;header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">    cloud_ptr_output-&gt;header.frame_id = frame_id_;</span><br><span class="line">    publisher_.<span class="built_in">publish</span>(*cloud_ptr_output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace data_output</span></span><br></pre></td></tr></table></figure>
<p>定义了一个定位命名空间，含有构造函数，<code>nh_</code> 和
<code>frame_id_</code> 是成员变量，分别用于存储 <code>NodeHandle</code>
和坐标框架的 ID。<code>advertise</code>
函数用于创建一个发布者，以便将点云数据发布到指定的话题（<code>topic_name</code>）上，<code>buff_size</code>
指定了消息队列的大小</p>
<p>然后定义了点云publish方法：<code>Publish</code>
函数接收一个点云数据指针 <code>cloud_ptr_input</code>。使用
<code>pcl::toROSMsg</code> 将 PCL（Point Cloud
Library）格式的点云数据转换为 ROS 的 <code>PointCloud2</code>
消息格式。设置消息的时间戳为当前时间，设置帧 ID。最后，调用
<code>publish</code> 函数将消息发布到指定的话题。</p>
<p>是一个用于处理和发布点云数据的类</p>
]]></content>
  </entry>
  <entry>
    <title>csapp_datalab</title>
    <url>/2024/06/17/csapp-datalab/</url>
    <content><![CDATA[<p>学着书上的知识还是很轻松的，一做lab就汗流浃背了...</p>
<p>lab 通过 wsl ubuntu 实现 ### tmin
返回最小的32位有符号数<code>0X80000000</code> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> p &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="istmaxx">IsTmax(x)</h3>
<p>判断 <span class="math inline">\(x\)</span>
是否为32位最大有符号数</p>
<p>即 <code>0X7FFFFFFF</code> , 发现对其按位取反就得到了最小的数
<code>0X80000000</code> , 然后用 <code>^</code>
判断相等即可。但是本题不支持 <code>&lt;&lt;</code> ， 因此用 +1 实现。即
<code>(~0X7FFFFFFF) ^ (0X7FFFFFFF + 1) == 0</code></p>
<p>在实现的过程中，发现 -1 也符合这一过程，
<code>(~0XFFFFFFFF) ^ (0XFFFFFFFF + 1) == 0</code> , 因此我们要排除-1，
判断一下 <span class="math inline">\(x + 1\)</span> 不为 0 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> p = x + <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> q = ~x;</span><br><span class="line">  <span class="keyword">return</span> (!(p ^ q))  &amp; !(!p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
看其他博客的时候学习到了另一种实现方法</p>
<p>用 <code>~(x + x + 1) == 0</code> 判断 , 这时 -1 也要排除</p>
<p>为什么是-1？ <span class="math inline">\(x + x\)</span> 可视为 <span
class="math inline">\(x\)</span> 的左移， 左移时 <span
class="math inline">\(x\)</span> 的最高位溢出， 因此 <span
class="math inline">\(x\)</span> 的最高位是 0 还是1都不影响左移的结果，
分别对应于 <code>0X7FFFFFFF</code> 和 <code>0XFFFFFFF</code> ,
它们执行上述操作的结果相同</p>
<p>这提示了我们要对最高位敏感一点 ### allOddBit</p>
<p>判断一个数 <span class="math inline">\(x\)</span> 是否每个奇数位都为1
（0~31位)</p>
<p>一开始的思路是用 <code>0XAAAAAAAA</code> &amp; <span
class="math inline">\(x\)</span> , 这样可以保留 <span
class="math inline">\(x\)</span> 的奇数位， 如果 <span
class="math inline">\(x\)</span> 每个奇数位都为 1， 那么
<code>0XAAAAAAAA</code> &amp; <span class="math inline">\(x\)</span>
的结果等于 <code>0XAAAAAAAA</code>本身，可以通过
<code>!((0XAAAAAAAA &amp; x) ^ 0XAAAAAAAA)</code> 表示</p>
<p>但是我构造 <code>0XAAAAAAAA</code> 的方法过于 naive：
<code>(1 &lt;&lt; 1) + (1 &lt;&lt; 3) + (1 &lt;&lt; 5) + (1 &lt;&lt; 7) + (1 &lt;&lt; 9) + (1 &lt;&lt; 11) + (1 &lt;&lt; 13) + (1 &lt;&lt; 15) + (1 &lt;&lt; 17) + (1 &lt;&lt; 19) + (1 &lt;&lt; 21) + (1 &lt;&lt; 23) + (1 &lt;&lt; 25) + (1 &lt;&lt; 27) + (1 &lt;&lt; 29) + (1 &lt;&lt; 31);</code></p>
<p>导致所用符号过多</p>
<p>看别人的博客发现可以直接定义 <code>0XAA</code> , 就可以更加方便地表示
<code>0XAAAAAAAA</code>、</p>
<p>(这个是lab规定的：整数范围在0-255之间，
是我懒得看英文的说明导致没有发现这条)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> mask = <span class="number">0XAA</span> + (<span class="number">0XAA</span> &lt;&lt; <span class="number">8</span>) + (<span class="number">0XAA</span> &lt;&lt; <span class="number">16</span>) + (<span class="number">0XAA</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">  <span class="type">int</span> flag1 = mask &amp; x;</span><br><span class="line">  <span class="type">int</span> flag2 = flag1 ^ mask;</span><br><span class="line">  <span class="keyword">return</span> !flag2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意移位运算符 <code>&lt;&lt;</code> 的优先级小于 <code>+</code> ，
因此要加括号。</p>
<h3 id="isasciidigit">isAsciiDigit</h3>
<p>判断一个数是否是数字ascii码的形式（0X30-0X39）</p>
<p>手搓发现，最后8位分为 <code>00110xxx</code> 和 <code>0011100x</code>
两种形式 (x表示任意)</p>
<p>对于 <code>00110xxx</code> ，让 <span
class="math inline">\(x\)</span> ^ <code>0X30</code>
后再右移三位，判断是否为0</p>
<p>对于 <code>0011100x</code> , 让 <span
class="math inline">\(x\)</span> ^ <code>0X38</code>
后再右移一位，判断是否为0</p>
<p>将两种结果取或即可。
我认为我的方法还是较为简洁的，虽然右移包含两种情况，也不影响结果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">  <span class="type">int</span> p = (x ^ <span class="number">0X30</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">  <span class="type">int</span> q = (x ^ <span class="number">0X38</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> !p | !q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>2024/7/30</title>
    <url>/2024/07/30/2024-7-30/</url>
    <content><![CDATA[<h3 id="雨雨落狂流之暗龙族">雨，雨落狂流之暗，龙族</h3>
<p>这个假期的南阳经常下暴雨，刚从学校返程一天半载，我就开始莫名地头晕发烧，倾盆大雨也随之而至，我烧了一天半，雨也下了一天半。南阳的雨和北京的雨不同，北京的雨是很有情调的，要么细细地下一段，要么重重地下一阵，讲求一个适度。适度的雨主要是生活中的陪衬。南阳的雨则是硬生生地砸到地面上，像是上层住户不负责任地泼水，失去了雨大部分有趣的地方，显得不近人情了些。以往的雨对宅在家里的我没有什么影响，最多给我的心情打一个特定的基底；现在我开始运动减脂，去父亲的学校跑步。不过仍然没有影响，因为运动使我的膝盖有些疼痛，本来今天就是休息日。不过我还是对这场雨不太欢迎，感觉它下的像是应付差事一般，有一种尸位素餐的失职。</p>
<p>初中和高中的雨都是下的很有趣的：每逢一个事件，就会开始下雨。初中入校的第一天，军训的最后一天，开学的第一天与学期结束的第一天，小长假的首尾...我经常会预测这种雨的到来，最后和它相逢，有种诸葛亮和周瑜一对手心都是一个“火”字一般的满足感。也不算兴奋，只是感觉心胸通畅了起来。中考的第一天上午，语文考试的考场上，我看到窗外下起了小雨，顿时有一种感觉弥漫在了心头，按照这种特殊的感觉写出了一篇记叙文，最后得分莫名的高。高中的雨也是如约而至，如期到达。到了高二暑假，我因为科大少年班参加了高考，当时没有什么压力，只当长长见识。考完最后一场英语时下起了暴雨，我意犹未尽地走出了考场，正看着新枫杨的学长们三三两两地走着，突然看到一对情侣在伞下接吻。当我出神地看着那把黄伞的时候，雨声似乎小了一些，时间也似乎慢了些。我想到的是，在第二年我正式高考之后，会不会也有这么一场雨，我会和zhy共同欣赏吗，我想着她站在我面前笑的样子。</p>
<p>第二年高考，考完最后一科英语之后，暴雨按时抵达了。可是我只想逃离这场雨，结束这场高考，回到家里恢复自己的疲惫。我不是旁观者了，没有去年观雨的心情了。</p>
<p>高考后的暑假，我回到了南阳，整个河南省开始爆发特大降雨，相比于南阳，郑州更加严重。当时那个地铁站的视频看得让人后怕，不少人住的小区开始断水断电，我分别安慰了wxy和dsq，她们当时确实受到了水灾的影响。当时没有胆量去问问zhy的情况。后来在朋友圈中看到，几个同学去担任了志愿者，送寄一些物资，不过这些慢慢都和雨无关了。上了大学之后，我失去了和雨的联系，北京的雨对我来说是陌生人，它下的更加随意。不过随着三年的大学生活，只在假期回家的我和南阳的雨也成了陌生人，也许我只认识郑州的雨罢，但是它已经不为我而下了三年了。不，它从未曾为我下过，像她。</p>
]]></content>
  </entry>
  <entry>
    <title>3月考研规划</title>
    <url>/2025/03/03/3%E6%9C%88%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="section">3.4-3.9</h2>
<h4 id="数学">数学</h4>
<ul>
<li>基础30讲
ch15微分方程，ch16无穷级数，ch17多元函数积分学的预备知识</li>
<li>武忠祥强化：专题一，专题二</li>
<li>880： ch2， ch3</li>
<li>李范：ch4，ch5</li>
</ul>
<h3 id="section-1">826</h3>
<ul>
<li>王道计网数据链路层</li>
<li>新威：到向量5</li>
<li>力扣每日一题</li>
</ul>
<h4 id="英语">英语</h4>
<ul>
<li>每日报刊阅读+单词</li>
</ul>
]]></content>
      <tags>
        <tag>考研规划</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp_hw_2</title>
    <url>/2024/06/22/csapp-hw-2/</url>
    <content><![CDATA[<p>csapp 第二章作业题 ### 2.55 在你能够访问的不同机器上，使用 show_bytes
编译并运行示例代码。确定这些机器使用的字节顺序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    show_bytes((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_float</span><span class="params">(<span class="type">float</span> x)</span> &#123;</span><br><span class="line">    show_bytes((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span> &#123;</span><br><span class="line">    show_bytes((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>show-bytes.c #### linux <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;show-bytes.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_show_bytes</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ival = val;</span><br><span class="line">    <span class="type">float</span> fval = (<span class="type">float</span>) ival;</span><br><span class="line">    <span class="type">int</span> *pval = &amp;ival;</span><br><span class="line">    show_int(ival);</span><br><span class="line">    show_float(fval);</span><br><span class="line">    show_pointer(pval);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    test_show_bytes(<span class="number">12345</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> test-show-bytes.c</p>
<p>要连接两个.c 程序，使用.h引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHOWBYTES_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHOWBYTES_H</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_float</span><span class="params">(<span class="type">float</span> x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_pointer</span><span class="params">(<span class="type">void</span> *x)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>show-bytes.h</p>
<p>然后编写 Makefile 文件，同时编译两个c程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mybin: show-bytes.c test-show-bytes.c</span><br><span class="line">	gcc show-bytes.c test-show-bytes.c -o mybin</span><br><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">	rm -f mybin</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果如下 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">39</span> <span class="number">30</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> e4 <span class="number">40</span> <span class="number">46</span></span><br><span class="line">a8 d1 <span class="number">24</span> fb fe <span class="number">7f</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure> 12345 = (int) 0x00003039</p>
<p>说明 linux 使用小端法编码</p>
<h4 id="windows">windows</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">39</span> <span class="number">30</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> e4 <span class="number">40</span> <span class="number">46</span></span><br><span class="line">ac f8 <span class="number">9f</span> cd <span class="number">2f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<h4 id="section">2.57</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">39</span> <span class="number">30</span>                      <span class="comment">// show_short</span></span><br><span class="line"><span class="number">39</span> <span class="number">30</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="comment">// show_long</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">80</span> <span class="number">1</span>c c8 <span class="number">40</span>    <span class="comment">// show_double</span></span><br></pre></td></tr></table></figure>
<h3 id="section-1">2.58</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="type">int</span> <span class="title function_">is_little_endian</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    byte_pointer p = &amp;a;</span><br><span class="line">    <span class="keyword">return</span> *p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, is_little_endian());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section-2">2.59</h3>
<p>编写一个c表达式，它生成一个字，由x的最低有效字节和y中剩下的字节组成。</p>
<p>在网上搜了一下，发现所谓的最低有效字节就是低位字节lsb</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_int</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    show_bytes((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">trans</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0XFF</span> &amp; x | <span class="number">0XFFFFFF00</span> &amp; y;</span><br><span class="line">    show_int(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    trans(<span class="number">0X89ABCDEF</span>, <span class="number">0X76543210</span>);  <span class="comment">// ef 32 54 76</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="section-3">2.60</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> *byte_pointer;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_bytes</span><span class="params">(byte_pointer start, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %.2x&quot;</span>, start[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_unsigned</span><span class="params">(<span class="type">unsigned</span> x)</span> &#123;</span><br><span class="line">    show_bytes((byte_pointer) &amp;x, <span class="keyword">sizeof</span>(<span class="type">unsigned</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">trans</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">int</span> i, <span class="type">unsigned</span> <span class="type">char</span> b)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> p = <span class="number">0XFF</span> &lt;&lt; (i * <span class="number">8</span>);</span><br><span class="line">    <span class="type">unsigned</span> q = b &lt;&lt; (i * <span class="number">8</span>);</span><br><span class="line">    x = x &amp; (~p);</span><br><span class="line">    x = x | q;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> ans = trans(<span class="number">0X12345678</span>, <span class="number">2</span>, <span class="number">0XAB</span>);</span><br><span class="line">    show_unsigned(ans); <span class="comment">// 78 56 ab 12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>leetcode3.4</title>
    <url>/2025/03/04/leetcode3-4/</url>
    <content><![CDATA[<p>嗟乎！时运不齐，命途多舛，冯唐易老，李广难封。太久不碰代码是这样的，脑子已经完全退化了。</p>
<p>283：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nums[i]) &#123;</span><br><span class="line">                <span class="type">int</span> j = i;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; !nums[j]) j++; </span><br><span class="line">                    <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>一个简单的想法：遍历数组，交换0元素和最近的一个非0元素，但是在全0序列中，会退化成
<span class="math inline">\(O(n^2)\)</span> 复杂度，对于我这种坚定的至少
<span class="math inline">\(O(nlogn)\)</span>
人来说不可接受。可以看出这个解法冗余在了中间一段已经访问过的0元素，可以用一个指针指示出查询时遍历的最右元素，这样复杂度就是
<span class="math inline">\(O(n)\)</span> 。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!nums[i]) &#123;</span><br><span class="line">                j = <span class="built_in">max</span>(j, i);</span><br><span class="line">                <span class="keyword">while</span>(j &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; !nums[j]) j++; </span><br><span class="line">                    <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>()) j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very
first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a class="link" 
 href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or
you can ask me on <a class="link" 
 href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" 
 href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" 
 href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link" 
 href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>ros-1</title>
    <url>/2024/09/21/ros-1/</url>
    <content><![CDATA[<p>使用的是ubuntu18.04的ros-melodic</p>
<p>首先是基础的三件套：</p>
<ul>
<li>roscore: 激活ros</li>
<li>rosrun turtlesim turtlesim-node : 创建一个小海龟节点</li>
<li>rosrun turtlesim turtle_teleop_key: 使用键盘控制海龟节点移动</li>
</ul>
<p><code>rqt_graph</code> : 打开一个可视化窗口，包括整个系统的控制图</p>
<p><code>rosnode</code>:</p>
<ul>
<li><p><code>rosnode list</code> : 展示所有节点</p></li>
<li><p><code>rosnode info + 节点名</code> ： 展示节点具体信息</p>
<p>以 /turtlesim 为例，其中有这几部分信息：</p>
<ul>
<li>Publications : 发布信息</li>
<li>subscriptions：订阅的信息</li>
<li>services ： 提供的服务</li>
<li>其他信息</li>
</ul></li>
</ul>
<p><code>rostopic</code> :</p>
<ul>
<li><code>rostopic list</code> ： 打印所有话题列表</li>
<li><code>rostopic pub /turtle1/cmd_vel + 内容 + 数据</code> ：</li>
</ul>
<p>###创建工作空间</p>
<p>创造工作空间： <code>mkdir -p ~/catkin_ws/src</code></p>
<p>编译工作空间： <code>cd ~/catkin_ws/</code></p>
<p>​ <code>catkin_make</code></p>
<p>设置环境变量： <code>source devel/setup.bash</code></p>
<p>检查环境变量： <code>echo $ROS_PACKAGE_PATH</code></p>
<p>​
显示示例：<code>/home/hb/catkin_ws/src:/opt/ros/melodic/share</code></p>
<p>###创建功能包：</p>
<p><code>catkin_create_pkg test_pkg std_msgs rospy roscpp</code> + 包名
+ 依赖</p>
<p>需放置在src文件夹中</p>
<p>新建的功能包包括：</p>
<ul>
<li>include</li>
<li>src</li>
<li>CMakeLists.txt</li>
<li>package.xml 功能包描述信息</li>
</ul>
<p>###编译功能包：</p>
<p><code>cd catkin_ws</code></p>
<p><code>catkin_make</code></p>
<p><code>source ~/catkin_ws/devel/setup.bash</code></p>
<p>## Publisher的实现</p>
<h3 id="创建功能包">创建功能包</h3>
<p><code>cd ~/catkin_ws/src</code></p>
<p><code>catkin_create_pkg learning_topic roscpp rospy std_msgs geometry_msgs turtlesim</code></p>
<h3 id="如何实现一个发布者">如何实现一个发布者</h3>
<ul>
<li>初始化ros节点</li>
<li>向 ROS Master注册节点信息，包括发布的话题名和话题中的消息类型</li>
<li>创建消息数据</li>
<li>按照一定频率循环发布信息</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ubuntu从0踩坑实录</title>
    <url>/2024/09/19/ubuntu%E4%BB%8E0%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/</url>
    <content><![CDATA[<p>这个ubuntu18.04虚拟机是为了激光雷达原理的算法组而新建的</p>
<h3 id="安装vmware-tools">安装vmware tools</h3>
<p>将下载的.tar.gz文件复制到桌面，进入文件夹，执行<code>sudo tar -zxvf VMWareTools-10.3.23-16594550.tar.gz</code>
, 进入解压出的文件夹 <code>vmware-tools-distrib</code>,
执行<code>sudo ./vmware-install.pl</code></p>
<h3 id="令人头疼的黑屏问题">令人头疼的黑屏问题</h3>
<p>在第一次进入虚拟机后，再次进入就会出现黑屏卡顿信息，然后就一直进不去</p>
<p>记录了一下黑屏信息：</p>
<ul>
<li><p>piix_smbus 0000:00:07:3: SMBus Host Controller not
enabled</p></li>
<li><p>[sda] Assuming drive cache: write through</p>
<p>/dev/sdal: clean, 471686/1638400 files, 626350/6553088 block</p>
<p>开始我是分开来查询的，对于第一条，csdn的解释是--刚扩展了磁盘容量，系统自动安装或启用了i2c_piix4模块。
给出的解决方法是将其禁用。当时我看的时候觉得这是一种掩耳盗铃的做法，果不其然，只是消除了第一行的警告，后面两行还是存在且进不去。</p></li>
</ul>
<p><del>将硬盘空间扩展为40G后，突然可以进了，那么暂时跳过这个问题</del></p>
<p>寄！又打不开了</p>
<h3 id="安装中文输入法">安装中文输入法</h3>
<h3 id="安装vscode">安装vscode</h3>
<p>在软件商城中下载</p>
]]></content>
  </entry>
  <entry>
    <title>光通信原理ch2</title>
    <url>/2025/03/03/%E5%85%89%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86ch2/</url>
    <content><![CDATA[<h3 id="确知信号的类型">确知信号的类型</h3>
<ul>
<li><p>是否具有周期性</p>
<ul>
<li>周期信号 <span
class="math display">\[s(t)=s(t+T_0),\quad  -\infty&lt;t&lt;+\infty,
\quad
  T_0&gt;0\]</span> 最小 <span class="math inline">\(T_0\)</span>
为周期，<span class="math inline">\(1/T_0\)</span> 为基频 <span
class="math inline">\(f_0\)</span></li>
<li>非周期信号</li>
</ul></li>
<li><p>能量是否有限： <span
class="math inline">\(\quad\)</span>通信理论中的功率一般为电流在单位电阻上的功率，即归一化功率
<span class="math display">\[P=V^2=I^2\]</span> 。用 <span
class="math inline">\(s(t)\)</span>
代表信号电压或电流的时间波形。信号能量 <span
class="math inline">\(E\)</span> 应当是信号瞬时功率的积分</p>
<p>​ <span class="math display">\[E=\int_{-\infty}^\infty
s^2(t)dt\]</span></p></li>
<li><p>能量信号: 信号能量是一个正的有限值<span
class="math display">\[0&lt;E=\int_{-\infty}^\infty
s^2(t)dt&lt;\infty\]</span> <span class="math inline">\(\quad\)</span>
能量信号的平均功率<span
class="math display">\[P=\lim\limits_{T\to\infty}\frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}
s^2(t)dt=0\]</span></p></li>
<li><p>功率信号：</p></li>
</ul>
<p>1</p>
]]></content>
      <tags>
        <tag>光通信原理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构ch1</title>
    <url>/2025/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84ch1/</url>
    <content><![CDATA[<h3 id="渐进记号">渐进记号</h3>
<ul>
<li><span class="math inline">\(\Theta\)</span> 记号：<span
class="math display">\[\Theta(g(n))=\{f(n):存在正常量c_1，c_2和n_0,使得对于所有n\geq
n_0,有0\leq c_1g(n)\leq f(n)\leq c_2g(n)\}\]</span> 称 <span
class="math inline">\(g(n)\)</span> 是 <span
class="math inline">\(f(n)\)</span> 的一个渐进紧确界。</li>
<li><span class="math inline">\(O\)</span> 记号：<span
class="math display">\[O(g(n))=\{f(n):存在正常量c和n_0,使得对于所有n\geq
n_0,有0\leq  f(n)\leq cg(n)\}\]</span> 称 <span
class="math inline">\(g(n)\)</span> 是 <span
class="math inline">\(f(n)\)</span>
的一个渐进上界。可能是也可能不是渐进紧确的。</li>
<li><span class="math inline">\(o\)</span> 记号：<span
class="math display">\[o(g(n))=\{f(n):对任意正常量c,存在正常量n_0,使得对于所有n\geq
n_0,有0\leq  f(n)&lt; cg(n)\}\]</span> 称 <span
class="math inline">\(g(n)\)</span> 是 <span
class="math inline">\(f(n)\)</span> 的一个非渐进紧确的上界。关系<span
class="math inline">\(f(n)=o(g(n))\)</span> 蕴含着<span
class="math display">\[\lim\limits_{n\to\infty}\frac{f(n)}{g(n)}=0\]</span></li>
<li><span class="math inline">\(\Omega\)</span> 记号：<span
class="math display">\[\Omega(g(n))=\{f(n):存在正常量c和n_0,使得对于所有n\geq
n_0,有0\leq  cg(n)\leq f(n)\}\]</span> 称 <span
class="math inline">\(g(n)\)</span> 是 <span
class="math inline">\(f(n)\)</span> 的一个渐进下界。</li>
<li><span class="math inline">\(\omega\)</span> 记号：<span
class="math display">\[\omega(g(n))=\{f(n):对任意正常量c,存在正常量n_0,使得对于所有n\geq
n_0,有0\leq  cg(n)&lt; f(n)\}\]</span> 称 <span
class="math inline">\(g(n)\)</span> 是 <span
class="math inline">\(f(n)\)</span> 的一个非渐进紧确的上界。关系<span
class="math inline">\(f(n)=o(g(n))\)</span> 蕴含着<span
class="math display">\[\lim\limits_{n\to\infty}\frac{f(n)}{g(n)}=\infty\]</span>
### 渐进复杂度 #### <span class="math inline">\(O(1)\)</span>: 常数，含
<span class="math inline">\(RAM\)</span> 的所有操作 #### <span
class="math inline">\(O(log_* n)\)</span>: 多重对数函数，<span
class="math inline">\(log_* n = x\)</span> 表示取 <span
class="math inline">\(x\)</span> 次对数运算后 <span
class="math inline">\(n=0\)</span>. 几乎是常数复杂度，应用是逆 <span
class="math inline">\(Ackermann\)</span>函数 #### <span
class="math inline">\(O(log n)\)</span>: <span
class="math inline">\(O(log^c n)=O(log_c n) = O(logn)\)</span>
这类算法复杂度无限接近于常数 <span class="math display">\[\forall
c&gt;0,logn=O(n^c)\]</span> #### <span
class="math inline">\(O(n^c)\)</span>:
多项式复杂度算法的效率认为令人满意 #### <span
class="math inline">\(O(2^n)\)</span>: 指数复杂度算法的效率认为不可接受
<span class="math inline">\(eg.\)</span> <span
class="math inline">\(SubsetSum\)</span> 问题： <span
class="math display">\[\forall S=\{a_1,a_2,...,a_n\}\subset \mathbb Z+,
0\leq t\leq s=\sum_{k=1}^n a_k.\exists T\subseteq s.t. \sum_{a\in T} a =
t ?\]</span> 最坏的情况下，需要检视每一个子集，共有 <span
class="math inline">\(2^n\)</span> 个 这类方法只能算作程序，而非算法。
<span class="math display">\[Subsetsum \quad is \quad
NP-complete\]</span></li>
<li><span class="math inline">\(P\)</span> 问题:
在多项式时间内可解的问题</li>
<li><span class="math inline">\(NP\)</span>
问题：在多项式时间内不知道能不能解的问题 <span
class="math display">\[P\subseteq NP\]</span></li>
<li><span class="math inline">\(NP-complete\)</span> 问题：<span
class="math inline">\(NP\)</span> 问题中最难的一个。其他 <span
class="math inline">\(NP\)</span> 问题都可以在多项式时间内规约成它 ###
渐进复杂度的层级划分</li>
<li><span class="math inline">\(O(1)\)</span> :
对数据结构的基本操作</li>
<li><span class="math inline">\(O(log_* n)\)</span> ：逆 <span
class="math inline">\(Ackermann\)</span>函数</li>
<li><span class="math inline">\(O(logn)\)</span>
：有序向量的二分查找，堆，词典的查询，插入与删除</li>
<li><span class="math inline">\(O(n)\)</span> ：数，图的遍历</li>
<li><span class="math inline">\(O(nlog_*n)\)</span> ： 某些 <span
class="math inline">\(mst\)</span> 算法</li>
<li><span class="math inline">\(O(nloglogn)\)</span> :
某些三角剖分算法</li>
<li><span class="math inline">\(O(nlogn)\)</span> : 排序，<span
class="math inline">\(EU\)</span>，<span
class="math inline">\(Huffman\)</span> 编码</li>
<li><span class="math inline">\(O(n^2)\)</span> ： <span
class="math inline">\(Dijkstra\)</span> 算法</li>
<li><span class="math inline">\(O(n^3)\)</span> : 矩阵乘法</li>
<li><span class="math inline">\(O(n^c)\)</span></li>
<li><span class="math inline">\(O(2^n)\)</span></li>
</ul>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode3.5</title>
    <url>/2025/03/05/leetcode3-5/</url>
    <content><![CDATA[<p><a class="link"   href="https://leetcode.cn/problems/intersection-of-two-linked-lists/?envType=study-plan-v2&amp;envId=top-100-liked" >160. 相交链表 - 力扣（LeetCode）<i class="fas fa-external-link-alt"></i></a></p>
<p>用map存一遍链表A中的节点，看链表B中有无相同即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;ListNode *, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">while</span> (headA) &#123;</span><br><span class="line">            mp[headA] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!headA-&gt;next) <span class="keyword">break</span>;</span><br><span class="line">            headA = headA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (headB) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp.<span class="built_in">count</span>(headB)) <span class="keyword">return</span> headB;</span><br><span class="line">            <span class="keyword">if</span> (!headB-&gt;next) <span class="keyword">break</span>;</span><br><span class="line">            headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>双链表的方法比较巧妙，平时没有怎么接触过</p>
<p>若要同时移动两个指针，当两链表节点数不同时，很显然不可能走到公共节点，不过相应的，如果两个指针在某一刻走到相同后缀数量的节点时，就可以同步移动，找出是否有公共节点。所以可以让指向A链表的指针为NULL时指向B链表的表头，指向B链表的指针为NULL时指向A链表的表头，补偿较少节点数的链表指针，多走一个循环，就可以满足条件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">        ListNode *p = headA, *q = headB;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (headA == headB) <span class="keyword">return</span> headA;</span><br><span class="line">            <span class="keyword">if</span> (!headA-&gt;next &amp;&amp; !headB-&gt;next) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> (!headA-&gt;next) headA = q;</span><br><span class="line">            <span class="keyword">else</span> headA = headA-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (!headB-&gt;next) headB = p;</span><br><span class="line">            <span class="keyword">else</span> headB = headB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>leetcode每日一题</tag>
      </tags>
  </entry>
</search>
